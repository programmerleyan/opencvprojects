import cv2
import mediapipe as mp
import numpy as np

# MediaPipe el tespiti
mp_hands = mp.solutions.hands
mp_draw = mp.solutions.drawing_utils
hands = mp_hands.Hands(max_num_hands=1)

# Çizim için boş tuval
canvas = None

# Kamera aç
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame = cv2.flip(frame, 1)  # Aynalama
    h, w, c = frame.shape
    if canvas is None:
        canvas = np.zeros((h, w, 3), dtype=np.uint8)

    # RGB dönüştür
    rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            # İşaret parmağı ucu
            x1 = int(hand_landmarks.landmark[8].x * w)
            y1 = int(hand_landmarks.landmark[8].y * h)

            # Orta parmak ucu
            x2 = int(hand_landmarks.landmark[12].x * w)
            y2 = int(hand_landmarks.landmark[12].y * h)

            # Parmağın yukarıda olup olmadığını kontrol et
            if y1 < y2:  # İşaret parmağı yukarıdaysa çizim modu
                cv2.circle(frame, (x1, y1), 10, (0, 0, 255), -1)
                cv2.circle(canvas, (x1, y1), 10, (0, 0, 255), -1)
            else:
                # Avuç açılmışsa temizleme
                if hand_landmarks.landmark[0].y < hand_landmarks.landmark[9].y:
                    canvas = np.zeros((h, w, 3), dtype=np.uint8)

    # Çizim ile orijinal görüntüyü birleştir
    gray_canvas = cv2.cvtColor(canvas, cv2.COLOR_BGR2GRAY)
    _, mask = cv2.threshold(gray_canvas, 20, 255, cv2.THRESH_BINARY)
    mask_inv = cv2.bitwise_not(mask)
    frame_bg = cv2.bitwise_and(frame, frame, mask=mask_inv)
    canvas_fg = cv2.bitwise_and(canvas, canvas, mask=mask)
    frame = cv2.add(frame_bg, canvas_fg)

    cv2.imshow("Sanal Kalem", frame)

    if cv2.waitKey(1) & 0xFF == 27:  # ESC ile çıkış
        break

cap.release()
cv2.destroyAllWindows()
